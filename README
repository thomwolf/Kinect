========================================================================
README for Kinect 3D Video Capture Project version 1.2
Copyright (c) 2010-2011 Oliver Kreylos
========================================================================

Requirements
============

This software requires the Vrui VR toolkit, version 2.0-001 or later. It
also requires libusb version 1.0.

Installation
============

0. Install Vrui (ideally, just run make followed by make install).

1. Set Vrui's installation directory in the makefile, either to
   Vrui-2.0 if Vrui was installed in its default location, or to
   whatever was configured in Vrui's makefile. For Vrui-2.0 build 001
   or 002, that is ~/Vrui-2.0-<build>, for Vrui-2.0 build 003 and later,
   it's simply ~/Vrui-2.0.

2. Run make.

3. Run ./bin/RawKinectViewer > CalibrationData.csv to gather camera
   calibration tie points, and write them into the calibration data
   file. This step requires a calibration object and manual interaction;
   see the video "Software Release and Kinect Camera Calibration" at
   http://www.youtube.com/watch?v=7TGF30-5KuQ for a step-by-step guide.

4. Run ./bin/CalibrateCameras to calibrate the color camera to the
   depth camera.

5. Rename the CameraCalibrationMatrices.dat file created by
   CalibrateCameras to CameraCalibrationMatrices-<serial number>.dat,
   where <serial number> is the Kinect camera's serial number, as
   displayed by lsusb -v. This is to associate calibration matrices with
   individual devices when using multiple Kinects, as they all seem to
   be different.

6. Create a ProjectorTransform-<serial number>.txt file, initially only
   containing "identity" (without the quotes). These files are used to
   merge 3D images from multiple Kinects into a single representation.

7. Run ./bin/KinectViewer <camera index>, where <camera index> is the
   zero-based index of the Kinect camera to use if there are multiple
   ones. If no index is specified, KinectViewer will use the first (or
   only) camera.

Merging 3D Facades from Multiple Kinects
========================================

To merge the 3D reconstructions of multiple Kinect cameras, first
internally calibrate each one using RawKinectViewer and
CalibrateCameras, as shown in the video. Then place an easily-measured
target object (such as a printed checkerboard) into the field of view of
all Kinect cameras, and measure the 3D positions of a number of
easily-identified points on the target (such as checkerboard tile
corners) using KinectViewer and a Vrui Measurement Tool. Using the
Measurement tool will create a MeasurementToolXXXX.dat file containing
all measured points; edit that file to only retain the x, y, z position
values and rename it to something like Kinect-0-Points.csv (note that
using the default calibration matrix, the reported positions are in
centimeters). Then create another csv file containing the "idealized"
positions of the same points you just measured, in the same order. Run
those two files through AlignPoints:

AlignPoints -OG Kinect-0-Points.csv ReferencePoints.csv

which will print a result transformation to the console. This
transformation describes how to transform the points from the first file
to the points in the second file; i.e., it describes the transformation
from "Kinect space" to "idealized space". Put that transformation into
ProjectorTransform-<serial number>.txt.

Note: Since the default projection matrix creates 3D positions in
centimeters, your idealized target points need to be in centimeters as
well. If they are not, you can account for that by passing a pre-scale
value to AlignPoints, which will transform units. For example, if
ReferencePoints.csv contains points measured in inches, you would run

AlignPoints -OG -S 0.3937 Kinect-0-Points.csv ReferencePoints.csv

(0.3937 is the length of a centimeter expressed in inches). Other unit
conversions are left as an exercise to the reader.

Repeat this process for all Kinects, ensuring not to move the
calibration target between measurements. After creating all
transformation files and editing KinectViewer.cpp to load multiple
cameras, which is currently hard-coded, running KinectViewer should show
a merged 3D image with relatively good alignment. Use the main menu to
select camera-linked views and toggle cameras as shown in the video.
